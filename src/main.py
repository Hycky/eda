import pandas as pd
from ydata_profiling import ProfileReport

df = pd.read_csv('data/data.csv')

profile = ProfileReport(df, title="AnÃ¡lise ExploratÃ³ria de Dados", explorative=True)	
profile.to_file("eda.html")

# ğŸ”¹ 1. ConversÃ£o para string (identificadores, cÃ³digos)
# Quando usar: colunas com nÃºmeros que representam IDs, CNPJs, cÃ³digos.
# df["COLUNA"] = df["COLUNA"].astype(str)

# ğŸ”¹ 2. ConversÃ£o para datetime (datas, timestamps)
# Quando usar: colunas com datas no formato string (ex: yyyy-mm-dd, dd/mm/yyyy etc).
# df["COLUNA"] = pd.to_datetime(df["COLUNA"], errors="coerce")

# ğŸ”¹ 3. Remover espaÃ§os em branco extras
# Quando usar: textos com espaÃ§os no inÃ­cio/fim (ex: nomes, cidades, categorias).
# df["COLUNA"] = df["COLUNA"].astype(str).str.strip()

# ğŸ”¹ 4. Texto para maiÃºsculas/minÃºsculas (normalizaÃ§Ã£o)
# Quando usar: padronizar textos categÃ³ricos (ex: sexo, uf, tipo).
# df["COLUNA"] = df["COLUNA"].str.upper()
# df["COLUNA"] = df["COLUNA"].str.lower()

# ğŸ”¹ 5. Preenchimento de valores ausentes com string
# Quando usar: substituir NaNs em colunas de texto.
# df["COLUNA"] = df["COLUNA"].fillna("DESCONHECIDO")

# ğŸ”¹ 6. Preenchimento de valores ausentes com datas
# Quando usar: preencher datas faltantes com uma data padrÃ£o.
# df["COLUNA"] = df["COLUNA"].fillna(pd.Timestamp("1900-01-01"))

# ğŸ”¹ 7. ConversÃ£o para booleano (sim/nÃ£o, ativo/inativo)
# Quando usar: colunas com valores como "Sim", "NÃ£o", "sim", "nao", etc.
# df["COLUNA"] = df["COLUNA"].str.strip().str.upper().map({"SIM": True, "NÃƒO": False, "NAO": False})

# ğŸ”¹ 8. Mapeamento de categorias padronizadas
# Quando usar: padronizar valores como sexo, estado civil, tipo etc.
# mapa = {"M": "Masculino", "F": "Feminino", "O": "Outro"}
# df["COLUNA"] = df["COLUNA"].map(mapa).fillna("Desconhecido")

# ğŸ”¹ 9. CÃ¡lculo de idade (a partir de data de nascimento)
# Quando usar: para anÃ¡lises de faixa etÃ¡ria ou perfis demogrÃ¡ficos.
# df["IDADE"] = (pd.Timestamp.today() - df["COLUNA"]).dt.days // 365

# ğŸ”¹ 10. Marcar idosos com base na idade
# Quando usar: segmentar populaÃ§Ã£o com 60+ anos.
# df["IDOSO"] = df["IDADE"].apply(lambda x: "SIM" if pd.notna(x) and x >= 60 else "NÃƒO")

# ğŸ”¹ 11. ExtraÃ§Ã£o de ano, mÃªs e dia a partir de uma data
# Quando usar: anÃ¡lises sazonais, agregaÃ§Ãµes temporais.
# df["COLUNA_ANO"] = df["COLUNA"].dt.year
# df["COLUNA_MES"] = df["COLUNA"].dt.month
# df["COLUNA_DIA"] = df["COLUNA"].dt.day

# ğŸ”¹ 12. Remover acentos (normalizaÃ§Ã£o avanÃ§ada de texto)
# Quando usar: padronizar textos para comparaÃ§Ãµes ou agrupamentos.
# import unicodedata
# df["COLUNA"] = df["COLUNA"].apply(lambda x: unicodedata.normalize('NFKD', str(x)).encode('ascii', errors='ignore').decode('utf-8'))

# ğŸ”¹ 13. Criar coluna condicional binÃ¡ria (ex: idade >= 18)
# Quando usar: criar flags como "Ã© adulto", "Ã© idoso", "Ã© menor de idade".
# df["ADULTO"] = df["IDADE"].apply(lambda x: "SIM" if pd.notna(x) and x >= 18 else "NÃƒO")
